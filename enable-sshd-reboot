#!/usr/bin/env python3

"""
MIT License

Copyright (c) 2021 Jeffrey C Honig, Terry Moore

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

from __future__ import print_function
import argparse
import logging
import sys
import urllib3
import requests
from typing import Any

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def parse_args():
    """ Parse the arguments """

    parser = argparse.ArgumentParser(description="Set up and enable sshd on Conduit AEP using the configuration API")

    #	Debugging
    group = parser.add_argument_group("Debugging options")
    group.add_argument("-d", "--debug",
                       dest="debug", default=False,
                       action='store_true',
                       help="print debugging messages")
    group.add_argument("--nodebug",
                       dest="debug",
                       action='store_false',
                       help="print debugging messages")
    group.add_argument("-v", "--verbose",
                       dest="verbose", default=False,
                       action='store_true',
                       help="print verbose messages")
    group.add_argument("-n", "--noop",
                       dest="noop", default=False,
                       action='store_true',
                       help="Don't make changes, just list what we are going to do")
    group.add_argument("-f", "--force",
                       dest="force", default=False,
                       action='store_true',
                       help="forcibly update the ssh setting and reboot, even if already set")

    #	Options
    group = parser.add_argument_group("Configuration options")
    group.add_argument("--username", "--user", "-U",
                       dest="username", default="mtadm",
                       help="Username to use to connect")
    group.add_argument("--password", "--pass", "-P",
                       dest="password", required=True,
                       help="Password to use to connect")
    group.add_argument("--address", "-A",
                       dest="address", default="192.168.2.1",
                       help="IP address of the conduit being commissioned")

    options = parser.parse_args()
    if options.debug:
        options.verbose = options.debug

    return options

def init_logging(options):
    """ Set up logging """

    logger = logging.getLogger()
    logger.handlers = []
    logger.addHandler(logging.StreamHandler())
    if options.debug:
        logger.setLevel('DEBUG')
    elif options.verbose:
        logger.setLevel('INFO')
    else:
        logger.setLevel('WARNING')

def do_request(description: str, session: requests.Session, url: str) -> Any:
    try:
        logging.debug("%s: %s", description, url)
        response = session.get(url, verify=False)
        response.raise_for_status()
        result = response.json()
        logging.debug("%s response: %s", description, result)
    except requests.exceptions.RequestException as error:
        logging.debug("%s error: %s", description, error)
        result = { 'error': error }

    return result

def do_post(description: str, session: requests.Session, url: str, data: Any = None) -> Any:
    try:
        logging.debug("%s: POST %s", description, url)
        response = session.post(url, verify=False, json=data)
        response.raise_for_status()
        result = response.json()
        logging.debug("%s: POST result: %s", description, result)
    except requests.exceptions.RequestException as error:
        logging.debug("%s POST error: %s", description, error)
        result = { 'error': error }

    return result

def do_put(description: str, session: requests.Session, /, url: str, data: Any = None) -> Any:
    try:
        logging.debug("%s: PUT %s", description, url)
        response = session.put(url, verify=False, json=data)
        response.raise_for_status()
        result = response.json()
        logging.debug("%s: PUT response: %s", description, result)
    except requests.exceptions.RequestException as error:
        logging.debug("%s PUT error: %s", description, error)
        result = { 'error': error }

    return result

#
def login(session: requests.Session, options) -> str:
    url = "https://{options.address}/api/login/?username={options.username}&password={options.password}".format(options=options)
    result = do_request("logging in", session, url)
    if 'result' in result and 'token' in result['result']:
        return result['result']['token']
    return None

def get_collection(session: requests.Session, options, token: str, param: str) -> Any:
    url = "https://{options.address}/api/{param}?token={token}".format(
        options=options, token=token, param=param
        )
    result = do_request("get collection", session, url=url)
    if 'result' in result:
        return result['result']
    return None

def set_collection(session: requests.Session, options, token: str, param: str, newValue: Any) -> Any:
    url = "https://{options.address}/api/{param}?token={token}".format(
        options=options, token=token, param=param
        )
    result = do_put(f"set collection {param}", session, url=url, data=newValue)
    return result

def do_command(session: requests.Session, options, token: str, command: str, /, data:Any=None, json:Any=None) -> Any:
    url = "https://{options.address}/api/command/{param}?token={token}".format(
        options=options, token=token, param=command
        )
    if data == None and json == None:
        result = do_post(f"do_command {command}", session, url=url)
    elif json != None:
        result = do_post(f"do command {command}", session, url=url, json=json)
    else:
        result = do_post(f"do command {command}", session, url=url, data=data)

    return result


#
#
#
#
def main():
    """ Figure out what we should do """

    options = parse_args()
    init_logging(options)

    session = requests.Session()

    result = login(session, options)
    if result == None:
        print("login failure")
        sys.exit(1)
    
    token = result

    # restore to previous save
    result = do_command(session, options, token, "revert")

    if result == None:
        print("restore failed!")
        sys.exit(1)

    # get the remoteAccess settings
    remoteAccess = get_collection(session, options, token, "remoteAccess")
    print(remoteAccess)

    ssh = remoteAccess['ssh']
    if not (ssh['enabled'] == True and \
            ssh['lan'] == True and \
            ssh['wan'] == False and \
            ssh['port'] == 22):
        print("ssh already enabled")
        if not options.force:
            return 0
        print("--force specified, continuing")
        
    # modify the ssh settings
    remoteAccess['ssh']['enabled'] = True
    remoteAccess['ssh']['lan'] = True
    remoteAccess['ssh']['wan'] = False
    remoteAccess['ssh']['port'] = 22

    # set the collection
    if not options.noop:
        result = set_collection(session, options, token, 'remoteAccess', remoteAccess)
        if result == None:
            print("failed to set ssh in remoteAccess")
            sys.exit(1)
    else:
        print("skipping update of remoteAccess")

    # save
    if not options.noop:
        result = do_command(session, options, token, 'save')
        if result == None:
            print("failed to save")
            sys.exit(1)

    # restart
    if not options.noop:
        result = do_command(session, options, token, 'restart')
        if result == None:
            print("failed to restart")
            sys.exit(1)

        print("seemed to work, now rebooting!")

    return 0

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print()
        sys.exit(1)
